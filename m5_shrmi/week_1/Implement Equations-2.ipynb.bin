{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reducing Equation Anxiety by Implementation\n",
    "\n",
    "## Not sure how to read an equation? Practice implementing them in Python to gain confidence in reading and understanding them.\n",
    "\n",
    "This notebook presents a number of common functions and elements of equations, showing how to read and understand the equations by implementing them in Python.\n",
    "\n",
    "To make the notebook work, you will need numpy and matplotlib installed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reading the Symbols\n",
    "\n",
    "Mathematical notation uses Greek symbols for both functions (like Sigma $\\sum$ for summing) and variables (like mu (pronounced mew) $\\mu$) like we used above. In statistics, we actually tend to follow the convention that Greek symbols are for statistical measures (like mean ($\\mu$ and standard deviation $\\sigma$) and model parameters. The Roman alphabet (a, b,c ...) is for variables like $x$ and $y$, counts - usually $n$ and indices like $i$ and $j$.\n",
    "\n",
    "You will recognise some conventions that have come across into programming, like using $i$ to index a for loop, for example.\n",
    "\n",
    "This table gives some examples\n",
    "\n",
    "| Symbol | pronounced | Usual Meaning |\n",
    "| --- | --- | --- |\n",
    "| $\\sum$ | Sum | Summation (add up) |\n",
    "| $\\prod$ | Product | Multiply together |\n",
    "| $\\mu$ | Mew | Average (mean) |\n",
    "| $\\sigma$ | Sigma | Standard Deviation |\n",
    "| $\\beta$ | Beta | Regression parameters |\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Visualising Common Functions\n",
    "\n",
    "Get an idea for how a function behaves by plotting it. Here are a few examples. Some are most interesting around zero, so be sure to plot them in the negative input range too."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x2736e7e8710>]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "x = np.arange(-5,5,0.1)\n",
    "plt.subplots_adjust(hspace=0.7)\n",
    "\n",
    "plt.subplot(2,2,1)\n",
    "plt.title(\"$X^2$\")\n",
    "plt.plot(x, x*x)\n",
    "\n",
    "plt.subplot(2,2,2)\n",
    "plt.title(\"$X^3$\")\n",
    "plt.plot(x, x*x*x)\n",
    "\n",
    "plt.subplot(2,2,3)\n",
    "plt.title(\"$e^x$\")\n",
    "plt.plot(x, np.exp(x))\n",
    "\n",
    "x = np.arange(0.1,10,0.1)\n",
    "plt.subplot(2,2,4)\n",
    "plt.title(\"log x\")\n",
    "plt.plot(x, np.log(x))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Sums and Products\n",
    "\n",
    "You know what an array is. In code, we index an array with square brackets, like this: `a[i]`. In equations, we index arrays using subscripts, like this $x_i$.\n",
    "\n",
    "Most programming languages start the index at zero, but in maths, it is common to start at one.\n",
    "\n",
    "In programming, we use the general construct of the `for` loop to iterate over an array. In equations, we use specific symbols for performing common operations over a set of values. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The most common is the sum (add them up):\n",
    "\n",
    "### Sum \n",
    "\n",
    "# $s = \\sum_{i=1}^n x_i$\n",
    "\n",
    "Read that as s equals the sum of x. Here is the Python code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The sum of  [1, 2, 6, 4, 8, 2]  is 23\n"
     ]
    }
   ],
   "source": [
    "x = [1, 2, 6, 4, 8, 2]  # Set up the data in x\n",
    "n = len(x)              # n is the length of x\n",
    "s = 0                   # start the sum at 0\n",
    "for i in range(n):      # i goes from 0 to n-1\n",
    "    s = s+x[i]\n",
    "print(\"The sum of \", x,\" is\", s)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "See how the mathematical notation is mirrored by the code? The equation is a lot more efficiently expressed though. See the correspondence between the variables in the code and the equation.\n",
    "\n",
    "Next, a similar idea is applied to the product (multiply them all together):\n",
    "\n",
    "### Product \n",
    "\n",
    "# $p = \\prod_{i=0}^n x_i$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The product of  [1, 2, 6, 4, 8, 2]  is 768\n"
     ]
    }
   ],
   "source": [
    "x = [1, 2, 6, 4, 8, 2]  # Set up the data in x\n",
    "n = len(x)              # n is the length of x\n",
    "p = 1                   # start the product at 0\n",
    "for i in range(n):      # i goes from 0 to n-1\n",
    "    p = p*x[i]\n",
    "print(\"The product of \", x,\" is\", p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example: The mean of `x`\n",
    "\n",
    "Here is the equation for calculating the average (mean) of the dataset, `x`:\n",
    "\n",
    "# $\\mu = \\frac{\\sum_{i=1}^n x_i}{n}$\n",
    "\n",
    "That is the sum of x, divided by n, so the code is simply this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average of  [1, 2, 6, 4, 8, 2]  is 3.8333333333333335\n"
     ]
    }
   ],
   "source": [
    "x = [1, 2, 6, 4, 8, 2]  # Set up the data in x\n",
    "n = len(x)              # n is the length of x\n",
    "s = 0                   # start the sum at 0\n",
    "for i in range(n):      # i goes from 0 to n-1\n",
    "    s = s+x[i]\n",
    "mu = s/n\n",
    "print(\"The average of \", x,\" is\", mu)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A look at Mean Squared Error\n",
    "The mean of a data set is the value with the smallest average squared distance from all the data points in the set. Let's see that in action.\n",
    "\n",
    "First we define a function to calculate the mean, so we can see the true value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.578947368421052\n"
     ]
    }
   ],
   "source": [
    "def mean(x):\n",
    "    n = len(x) \n",
    "    s = 0                   # start the sum at 0\n",
    "    for i in range(n):      # i goes from 0 to n-1\n",
    "        s = s+x[i]\n",
    "    return s/n\n",
    "\n",
    "x = [3,4,5,4,3,6,7,6,7,5,6,2,3,4,6,3,2,5,6]\n",
    "print(mean(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now we need a function to calculate the mean squared error (MSE)\n",
    "\n",
    "This is the result of taking a single estimate for the mean, lets call it $\\mu$ (mu) and adding up the squared difference between $\\mu$ and each value in a data set, we will call $x$. The equation looks like this:\n",
    "\n",
    "# $mse = \\sum_{i=1}^n (\\mu - x_i)^2$\n",
    "\n",
    "The sum with $i$ from 1 to $n$ of $\\mu$ minus $x_i$ squared."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mse(x, mu):             # Mean of the squared difference between mu and each element in x\n",
    "    n = len(x) \n",
    "    s = 0                   # start the sum at 0\n",
    "    for i in range(n):      # i goes from 0 to n-1\n",
    "        s = s+(mu-x[i])*(mu-x[i])  # Sum of squared errors\n",
    "    return s/n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Let's try a few guesses at $mu$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15.263157894736842\n"
     ]
    }
   ],
   "source": [
    "print(mse(x, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "guesses = np.arange(1,7,0.1)\n",
    "mse_vals = [mse(x, guess) for guess in guesses]\n",
    "plt.plot(guesses, mse_vals)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
